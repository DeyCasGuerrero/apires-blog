// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  idProfile   Int    @id @default(autoincrement())
  description String

  user      User   @relation(fields: [userEmail], references: [email],onDelete: Cascade)
  userEmail String @unique
}

model User {
  idUser   String @id @default(cuid()) //clave principal
  email    String @unique //campo unico
  name     String 
  password String
  country  String

  profile    Profile?
  Blog       Blog[]
  UserOnNews UserOnNews[]

  role Role @default(USER)
}

model Blog {
  idBlog    String    @id @default(cuid())
  title     String
  content   String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  author      User   @relation(fields: [authorEmail], references: [email], onDelete: Cascade) //clave foranea usando un campo unico
  authorEmail String

  // category       Category[] // relación implícita
  BlogOnCategory BlogOnCategory[]
}

model Category {
  idCategory     Int              @id @default(autoincrement())
  name           String
  // blog           Blog[] // relación implícita
  BlogOnCategory BlogOnCategory[]
}

//relación explicita

model BlogOnCategory {
  blogId     String // Campo escalar utilizado en el atributo `@relation` arriba
  blog       Blog     @relation(fields: [blogId], references: [idBlog],onDelete: Cascade)
  categoryId Int // Campo escalar utilizado en el atributo `@relation` arriba
  category   Category @relation(fields: [categoryId], references: [idCategory],onDelete: Cascade)

  @@id([blogId, categoryId])
}

model News {
  idNews     Int          @id @default(autoincrement())
  title      String
  content    String
  createdAt  DateTime?    @default(now())
  updatedAt  DateTime?    @updatedAt
  
  UserOnNews UserOnNews[]
  newsOnCate NewsOnCate[]
}

model NewsCategory {
  idCaNews   Int          @id @default(autoincrement())
  category   String
  newsOnCate NewsOnCate[]
}

model NewsOnCate {
  news   News @relation(fields: [newsId], references: [idNews], onDelete: Cascade)
  newsId Int

  newCategory        NewsCategory @relation(fields: [idCategory], references: [idCaNews], onDelete: Cascade)
  idCategory         Int

  @@id([newsId, idCategory])
}

model UserOnNews {
  author      User   @relation(fields: [authorEmail], references: [email], onDelete: Cascade)
  authorEmail String

  news   News @relation(fields: [newsId], references: [idNews], onDelete: Cascade)
  newsId Int

  @@id([authorEmail, newsId])
}

enum Role {
  ADMIN
  USER
}
